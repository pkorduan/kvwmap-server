#!/bin/bash
#echo "Load variables in dcm ftpserver"
CARGOS+=("ftpserver")

usage_ftpserver() {
  echo "install ftpserver  Installiert das ftpserver Image."
  echo "run ftpserver      Erzeugt und startet nur den Container ftpserver."
  echo "rerun ftpserver    Stoppt, Entfernt und Erzeugt und Startet einen neuen ftpserver-Container."
  echo "start ftpserver    Startet nur den Container ftpserver."
  echo "status ftpserver   Zeigt den aktuellen Status des Container ftpserver an."
  echo "stop ftpserver     Startet nur den Container ftpserver."
  echo "uninsall ftpserver Deinstalliert das ftpserver image und die dazugehörigen lokalen Ressourcen auf dem Hostrechner."
}

install_ftpserver() {
  echo "Installiere ftpserver ..."

  source $USER_DIR/kvwmap-server/ftpserver/etc/ftpserver/env_and_volumes

  echo "
Erzeuge ftpserver Data-Verzeichnis: ${ftpserver_DATA_DIR}"
  mkdir -p $ftpserver_DATA_DIR
  chown -R $OS_USER.$OS_USER $ftpserver_DATA_DIR
  chmod -R a+w $ftpserver_DATA_DIR

  echo "
Kopiere ftpserver Konfigurationsdatien nach $USER_DIR/etc/ftpserver/"
  echo "cp ${USER_DIR}/kvwmap-server/ftpserver/etc/ftpserver/env_and_volumes ${USER_DIR}/etc/ftpserver/env_and_volumes"
	mkdir ${USER_DIR}/etc/ftpserver
  cp ${USER_DIR}/kvwmap-server/ftpserver/etc/ftpserver/env_and_volumes ${USER_DIR}/etc/ftpserver/env_and_volumes
  chown -R $OS_USER.$OS_USER ${USER_DIR}/etc/ftpserver
  chmod -R a+w ${USER_DIR}/etc/ftpserver
  chmod a+x ${USER_DIR}/etc/ftpserver/env_and_volumes

  echo "
  Ziehe Image ${ftpserver_IMAGE}:${ftpserver_IMAGE_VERSION} von dockerhub"
  docker pull ${ftpserver_IMAGE}:${ftpserver_IMAGE_VERSION}

  echo "Der ftpserver container kann nun gestartet werden mit dem Befehl:"
  echo "dcm run ftpserver"
}

remove_ftpserver_container() {
  stop_ftpserver_container

  if [ "$(docker ps -a -q -f name=ftpserver -f status=exited)" ] ; then
    echo "Lösche Container ..."
    docker rm ftpserver
  else
    echo "Container ftpserver kann nicht gelöscht werden, weil er nicht existiert."
  fi
}

remove_ftpserver_image() {
  source $USER_DIR/etc/ftpserver/env_and_volumes
  echo "Lösche ftpserver Image: ${ftpserver_IMAGE}:${ftpserver_IMAGE_VERSION}"
  docker rmi ${ftpserver_IMAGE}:${ftpserver_IMAGE_VERSION}
}

run_ftpserver_container() {
  source $USER_DIR/etc/ftpserver/env_and_volumes
  echo "Erzeuge und starte den ftpserver Container"
  echo "mit volumes: ${ftpserver_volumes}"
  docker run --name ${ftpserver_CONTAINER_NAME} \
    -h ${SERVER_NAME}-${ftpserver_CONTAINER_NAME}-container \
    $ftpserver_volumes \
    $ftpserver_env_vars \
    $ftpserver_ports \
    --restart=always \
    -d ${ftpserver_IMAGE}:${ftpserver_IMAGE_VERSION}
}

set_ftpserver_web_link() {
  echo "Setzte ftpserver link zum Starten des web containers: --link ftpserver:ftpserver"
  CARGO_WEB_LINKS=${CARGO_WEB_LINKS}" --link ftpserver:ftpserver"
}

show_status() {
  echo "Status of container $COINTAINER_NAME"
}

start_ftpserver_container() {
  echo "Starte ftpserver Container. Bitte warten ..."
  docker start ftpserver
}

stop_ftpserver_container() {
  if [ "$(docker ps -a -q -f name=ftpserver -f status=running)" ] ; then
    echo "Stoppe Container. Bitte warten ..."
    docker stop ftpserver
  else
    echo "Container ftpserver kann nicht gestoppt werden, weil er nicht läuft."
  fi
}

uninstall_ftpserver() {
  source $USER_DIR/etc/ftpserver/env_and_volumes
  remove_ftpserver_container
  
  echo "Dieser Befehl deinstalliert das image $ftpserver_IMAGE:$ftpserver_IMAGE_VERSION und auf Nachfrage alle dazugehörigen auf diesem Host gespeicherten Daten, die ftpserver genutzt hat."
  read -p "Wollen Sie das Image wirklich deinstallieren? (j/n)? " answer
  case ${answer:0:1} in
    j|J )
      docker rmi ${ftpserver_IMAGE}:${ftpserver_IMAGE_VERSION}
      echo "Lösche ftpserver Datenverzeichnis $ftpserver_DATA_DIR"
      ls -l $ftpserver_DATA_DIR
      rm -RI $ftpserver_DATA_DIR
      
      echo "Lösche ftpserver Konfiguration in Apache2."
      rm $USER_DIR/etc/apache2/sites-available/ftpserver.conf
      rm $USER_DIR/etc/apache2/sites-enabled/ftpserver.conf

      echo "So jetzt ist ftpserver weg."
      echo "Zum neu installieren nach ${USER_DIR} wechseln und folgenden Befehle eingeben:"
      echo "$ dcm install ftpserver"
      echo "$ dcm remove web"
      echo "$ dcm run ftpserver"
      echo "$ dcm run web"
      echo "Die Anwendung ist im Browser zu erreichen unter:"
      echo "http://meineserverip/ftpserver/web/"
      echo "Die initialen Zugangsdaten zur Admin GUI von ftpserver sind User: admin und Password: ftpserver"
    ;;
    * )
      echo "OK, nix passiert!"
    ;;
  esac
}

cases_ftpserver() {
  case_found=true
  case "$1" in
    console)
      case $2 in
        ftpserver)
          echo "Öffne ein Terminal im Container in dem der ftpserver läuft ..."
          docker exec -it ftpserver /bin/bash
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    install)
      case $2 in
        ftpserver)
          install_ftpserver
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    ip)
      case $2 in
        ftpserver)
          show_container_ip $2
        ;;
        * )
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    uninstall)
      debug "Case uninstall in ftpserver"
      case $2 in
        ftpserver)
          #echo "Case ftpserver"
          uninstall_ftpserver
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    remove)
      debug "Case remove in ftpserver"
      case $2 in
        ftpserver)
          remove_ftpserver_container
          # Derzeit muss auch das dazugehörige Image gelöscht werden, weil sich ftpserver container
          # merkwürdigerweise nach dem ziehen eines Images immer nur einmal korrekt starten lassen.
          remove_ftpserver_image
        ;;
        * )
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    rerun)
      debug "Case rerun in ftpserver"
      case $2 in
        ftpserver)
          remove_ftpserver_container
          run_ftpserver_container
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    run)
      debug "Case run in ftpserver"
      case $2 in
        ftpserver)
          run_ftpserver_container
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    start)
      debug "Case start in ftpserver"
      case $2 in
        ftpserver)
          start_ftpserver_container
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    status)
      case $2 in
        ftpserver)
          show_container_status "ftpserver"
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    stop)
      debug "Case stop in ftpserver"
      case $2 in
        ftpserver)
          stop_ftpserver_container
        ;;
        *)
          debug "No subcase $2 in ftpserver"
          case_found=false
        ;;
      esac
    ;;

    *)
      #echo "No case found in dcm ftpserver"
      case_found=false
    ;;
  esac
  debug "Case found after cases ftpserver: $case_found"
}
