#!/bin/bash

# Settings
#settings
OS_USER="gisadmin"
OS_USER_EXISTS=false
getent passwd $OS_USER >/dev/null 2>&1 && OS_USER_EXISTS=true
USER_DIR=/home/$OS_USER
KVWMAP_IMAGE_VERSION=latest
if [ "$(id -u)" == '0' ]; then
  IP_EXTERN=`ifconfig eth0 | grep 'inet ' | awk '{ print $2 }' | cut -d: -f2`
fi

usage() {
  echo ""
  echo "Das Script führt Anweisungen für die Verwaltung des kvwmap-Servers aus. Es muss als Nutzer root ausgeführt werden.";
  echo "Dazu gehören Befehle zum Starten und Stoppen der Container aber auch solche zum Anzeigen von Stati und Laden von Konfigurationen und sonstige häufiger für die Administration benötigten Komandos."
  echo "Kontakt: peter.korduan@gdi-service.de"
  echo ""
  echo "Aufruf:";
  echo "kvwmap [Option]";
  echo ""
  echo "Optionen:"
  echo "clean         Löscht alle beendeten Container und nicht getaggete images."
  echo "console mysql Öffnet eine Console im Mysql Container."
  echo "console pgsql Öffnet eine Console im PostgreSQL Container."
  echo "install       - Installiert auf dem Hostrechner den Docker-Server und Utilities zum Betrieb der Container,"
  echo "              - Richtet den Nutzer gisadmin ein und konfiguriert die Bash-Einstellungen von gisadmin und root,"
  echo "              - Erzeugt die Verzeichnisse, die kvwmap auf dem Host benötigt und die als Volumes in die Container eingebunden werden,"
  echo "              - Zieht die Images für MySQL und PostgreSQL von dockerhup und macht den Build für das kvwmap-Image."
  echo "mysql client  Öffnet eine Komandozeile im mysql Client."
  echo "mysql start   Startet nur den Container mit der MySQL-Datenbank (mysql-server)"
  echo "mysql status  Zeigt den Status des MySQL Containers an."
  echo "mysql stop    Stoppt den MySQL Container und zeigt alle vorhandenen an."
  echo "mysql remove  Stoppt und löscht den MySQL Container und zeigt die verbleibenden an."
  echo "pgsql client  Öffnet eine Komandozeile im psql Client."
  echo "pgsql start   Startet nur den Container mit der PostgreSQL-Datenbank (pgsql-server)."
  echo "pgsql status  Zeigt den Status des PostgreSQL-Datenbank Containers an."
  echo "pgsql stop    Stoppt den PostgreSQL Container und zeigt alle vorhandenen an."
  echo "pgsql remove  Stoppt und löscht den PostgreSQL Container und zeigt die verbleibenden an."
  echo "restart       Stoppt und löscht alle Container und startet sie neu wie beim Parameter start."
  echo "rebuild       Stoppt und löscht alle Container, löscht das vorhandene kvwmap-server image, bildet es neu und startet danach alle Container neu."
  echo "reload        Das selbe wie bei rebuild, nur dass nicht das image lokal neu gebuildet wird, sondern das latest von Dockerhub geladen wird."
  echo "remove        Löscht alle Container."
  echo "start         Erzeugt das Volum für die www Daten und startet alle Container."
  echo "status        Listet alle Container und Images auf."
  echo "stop          Stoppt alle Container."
  echo "uninstall     (Derzeit noch ungetestet) Vorsicht, Stoppt und löscht alle Container, löscht alle Images und deinstalliert kvwmap-server."
  echo "              Dazu gehört alles in /var/www sowie die Verzeichnisse db, etc und kvwmap-server"
  echo "              unter dem Installationsverzeichnis z.B. unter /home/gisadmin"
  echo ""
  echo "Beispiele:"
  echo "$0 start"
  echo "$0 stop"
  echo "$0 pgsql status"
  echo ""  
}

build() {
  TAG=$1
  if [ -z "$TAG" ] ; then
    TAG="latest"
  fi
  cd $USER_DIR/kvwmap-server/docker
  docker build -t pkorduan/kvwmap-server:${TAG} .
}

create_www_data_volume() {
  docker create --name wwwdata \
    -v /var/www:/var/www \
      pkorduan/kvwmap-server:${KVWMAP_IMAGE_VERSION} /bin/true
}

fail_unless_root() {
  if [ "$(id -u)" != '0' ]; then
    echo "This script must be run as root"
    exit 1
  fi
}

remove_all_container() {
  echo "Lösche alle Container."
  docker rm $(docker ps -a -q)
  echo "Alle Container gelöscht."
}

remove_all_images() {
  echo "Lösche alle Images."
  docker rmi $(docker images | awk "{print $3}")
  echo "Alle Images gelöscht."
}

show_container_status() {
  CONTAINER=$1
  RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 
  if [ $? -eq 1 ]; then
    echo "UNKNOWN - Container $CONTAINER does not exist."
    exit 3
  fi
 
  if [ "$RUNNING" == "false" ]; then
    echo "CRITICAL - $CONTAINER is not running."
    exit 2
  fi
 
  GHOST=$(docker inspect --format="{{ .State.Ghost }}" $container)
 
  if [ "$GHOST" == "true" ]; then
    echo "WARNING - $CONTAINER has been ghosted."
    exit 1
  fi
 
  STARTED=$(docker inspect --format="{{ .State.StartedAt }}" $CONTAINER)
  NETWORK=$(docker inspect --format="{{ .NetworkSettings.IPAddress }}" $CONTAINER)
 
  echo "OK - $CONTAINER is running. IP: $NETWORK, StartedAt: $STARTED"
}

start_all_container() {
  create_www_data_volume
  start_mysql_container
  start_pgsql_container
  start_web_container
}

stop_all_container() {
  echo "Stoppe alle Container."
  docker stop $(docker ps -a -q)
  echo "Alle Container gestopped."
}

start_mysql_container() {
  read -s -p "Enter Password for MySql user root: " MYSQL_ROOT_PASSWORD
  docker run --name mysql-server \
    -v $USER_DIR/etc/mysql:/etc/mysql \
    -v $USER_DIR/db/mysql:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
    -d mysql:5.5
}

start_pgsql_container() {
  read -s -p "Enter Password for PostgreSql user root: " PGSQL_ROOT_PASSWORD
  docker run --name pgsql-server \
    --volumes-from wwwdata \
    -v $USER_DIR/db/postgresql/data:/var/lib/postgresql/data \
    -p 5432:5432 \
    -e POSTGRES_PASSWORD=$PGSQL_ROOT_PASSWORD \
    -d mdillon/postgis:9.4
}

#
# Start the web container
#
start_web_container() {
  docker run --name web \
      --link mysql-server:mysql \
      --link pgsql-server:pgsql \
      -p 80:80 \
      -p 443:443 \
      -e "OS_USER=${OS_USER}" \
      -e "IP_EXTERN=${IP_EXTERN}" \
      --volumes-from wwwdata \
      -v $USER_DIR/etc/apache2/sites-available:/etc/apache2/sites-available \
      -v $USER_DIR/etc/apache2/sites-enabled:/etc/apache2/sites-enabled \
      -v $USER_DIR/etc/php5/php.ini:/etc/php5/apache2/php.ini \
      -d pkorduan/kvwmap-server:${KVWMAP_IMAGE_VERSION}
  docker ps
}

case "$1" in
  clean)
    echo "Lösche alle nicht genutzten Container."
    docker rm $(docker ps -q -f status=exited)
    
    echo "Lösche alle Images mit Namen <none>."
    docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
  ;;
  
  console)
    fail_unless_root
    case $2 in
      mysql)
        echo "Öffne ein Terminal im Container in dem der MySQL-Server läuft."
        docker exec -it mysql-server /bin/bash
      ;;
      pgsql)
        echo "Öffne ein Terminal im Container in dem der PostgreSQL-Server läuft."
        docker exec -it pgsql-server /bin/bash
      ;;
      web)
        echo "Öffne ein Terminal im Container in dem der Web-Server läuft."
        docker exec -it web /bin/bash
      ;;
      *)
        echo "Zu welchem Container soll eine Console aufgemacht werden, mysql, pgsql oder web?"
      ;;
    esac
  ;;
  
  install)
    fail_unless_root
    
    # Update debian repo
    apt-get update && apt-get install -y \
      apt-utils \
      curl \
      wget

    case `docker --version` in
      *Docker*)
        echo 'Docker allready installed!' 
        ;;
      *)
        # install docker
        echo 'Install docker.'
        curl -sSL https://get.docker.com/ | sh
      ;;
    esac

    # create user for web gis anwendung if not exists
    $OS_USER_EXISTS || adduser $OS_USER

    # set bash settings for web gis user
    cp /etc/skel/.bashrc $USER_DIR/.bashrc
    echo "export PATH=\$PATH:${USER_DIR}/kvwmap-server" >> $USER_DIR/.bashrc
    sed -i \
      -e "s|#alias ll=|alias ll=|g" \
      -e "s|alias rm=|#alias rm=|g" \
        $USER_DIR/.bashrc
    cp $USER_DIR/.bashrc ~/.bashrc
    source ~/.bashrc
    
    # create directories
    mkdir -p $USER_DIR/db/mysql \
             $USER_DIR/db/postgresql/data \
             $USER_DIR/etc/apache2/sites-available \
             $USER_DIR/etc/apache2/sites-enabled \
             $USER_DIR/etc/mysql \
             $USER_DIR/etc/postgresql \
             $USER_DIR/etc/php5 \
             /var/www/apps \
             /var/www/html \
             /var/www/logs \
             /var/www/tmp \
             /var/www/cache \
             /var/www/wms \
             /var/www/data/mapfiles \
             /var/www/data/synchro \
             /var/www/data/upload \
             /var/www/data/druckrahmen \
             /var/www/data/bilder \
             /var/www/data/alb \
             /var/www/data/referencemaps \
             /var/www/data/nachweise \
             /var/www/data/recherchierte_antraege \
             /var/www/data/festpunkte/archiv
    
    ln -s /var/www $USER_DIR/www
    ln -s $USER_DIR/db/postgresql/data/pg_hba.conf $USER_DIR/etc/postgresql/pg_hba.conf
    ln -s $USER_DIR/db/postgresql/data/postgresql.conf $USER_DIR/etc/postgresql/postgresql.conf
    chown -R $OS_USER.$OS_USER \
      $USER_DIR/db/postgresql/data/pg_hba.conf \
      $USER_DIR/db/postgresql/data/postgresql.conf

    cp $USER_DIR/kvwmap-server/www/html/index.php /var/www/html/index.php
    cp -R $USER_DIR/kvwmap-server/etc/ $USER_DIR/
    cp -R $USER_DIR/kvwmap-server/www/data/mapfiles/ /var/www/data/
    cp -R $USER_DIR/kvwmap-server/www/data/referencemaps/ /var/www/data/
    cp -R $USER_DIR/kvwmap-server/www/apps/PDFClass /var/www/apps/

    if [ ! -d "/var/www/apps/kvwmap" ]; then
      # clone kvwmap repository into apps
      git clone https://github.com/srahn/kvwmap.git /var/www/apps/kvwmap
      cd /var/www/apps/kvwmap
      git checkout develop
    fi

    mkdir -p /var/www/apps/kvwmap/fonts/custom \
             /var/www/apps/kvwmap/graphics/custom \
             /var/www/apps/kvwmap/layouts/custom \
             /var/www/apps/kvwmap/layouts/snippets/custom \
             /var/www/apps/kvwmap/symbols/custom

    PHPMYADMIN_VERSION="4.4.12"

    cd /var/www/apps
    wget -O phpMyAdmin.tar.gz --no-check-certificate https://files.phpmyadmin.net/phpMyAdmin/${PHPMYADMIN_VERSION}/phpMyAdmin-${PHPMYADMIN_VERSION}-all-languages.tar.gz
    tar xvfz phpMyAdmin.tar.gz
    mv /var/www/apps/phpMyAdmin-${PHPMYADMIN_VERSION}-all-languages /var/www/apps/phpMyAdmin
    rm /var/www/apps/phpMyAdmin.tar.gz

    chown -R $OS_USER.$OS_USER $USER_DIR /var/www
    chmod g+w /var/www/apps/kvwmap \
              /var/www/apps/kvwmap/graphics/wappen \
              /var/www/data/bilder \
              /var/www/data/festpunkte \
              /var/www/data/nachweise \
              /var/www/data/recherchierte_antraege \
              /var/www/data/synchro \
              /var/www/data/upload \
              /var/www/logs \
              /var/www/tmp

    # download neccessary images for mysql and postgis
    docker pull mysql:5.5

    docker pull mdillon/postgis:9.4
    
    docker pull pkorduan/kvwmap-server:latest

    # build the kvwmap-server images from the Dockerfilie in the git repository kvwmap-server
    # build "latest"
  ;;

  mysql)
    fail_unless_root
    case $2 in
      client)
        MYSQL_TCP_ADD=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' mysql-server`
        MYSQL_ROOT_PASSWORD=`docker inspect --format '{{index .Config.Env 0}}' mysql-server | cut -d \= -f 2`
        docker exec -it mysql-server mysql -h ${MYSQL_TCP_ADD} -u root --password=${MYSQL_ROOT_PASSWORD} mysql
      ;;
      start)
        start_mysql_container
      ;;
      stop)
        docker stop mysql-server
        docker ps -a
      ;;
      remove)
        docker stop mysql-server
        docker rm mysql-server
        docker ps -a
      ;;
      status)
        show_container_status "mysql-server"
      ;;
      *)
        echo "Gib nach mysql einen der folgenden Parameter ein: client, start, stop, remove oder status."
      ;;
    esac
  ;;

  pgsql)
    fail_unless_root
    case $2 in
      client)
        POSTGRESQL_TCP_ADD=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' pgsql-server`
        PGPASSWORD=`docker inspect --format '{{index .Config.Env 0}}' pgsql-server | cut -d \= -f 2`
        docker exec -it pgsql-server psql -h ${POSTGRESQL_TCP_ADD} -U postgres postgres
      ;;
      start)
        start_pgsql_container
      ;;
      stop)
        docker stop pgsql-server
        docker ps -a
      ;;
      remove)
        docker stop pgsql-server
        docker rm pgsql-server
        docker ps -a
      ;;
      status)
        show_container_status "pgsql-server"
      ;;
      *)
        echo "Gib nach pgsql einen der folgenden Parameter ein: client, start, stop, remove oder status."
      ;;
    esac
  ;;
  
  rebuild)
    fail_unless_root
    stop_all_container
    remove_all_container
    docker rmi -f $(docker images -q pkorduan/kvwmap-server)
    build "latest"
    start_all_container
  ;;

  reload)
    fail_unless_root
    stop_all_container
    remove_all_container
    docker rmi -f $(docker images -q pkorduan/kvwmap-server)
    docker pull pkorduan/kvwmap-server:latest
    start_all_container
  ;;
  
  remove)
    fail_unless_root
    remove_all_container
  ;;

  restart)
    fail_unless_root
    stop_all_container
    remove_all_container
    start_all_container
  ;;

  start)
    fail_unless_root
    start_all_container
  ;;

  status)
    fail_unless_root
    docker ps -a
    docker images
  ;;

  stop)
    fail_unless_root
    stop_all_container
  ;;
  
  uninstall)
    fail_unless_root
    read -p "Wollen Sie kvwmap-server wirklich deinstallieren? (j/n)? " answer
    case ${answer:0:1} in
      j|J )
        stop_all_container
        remove_all_container
        remove_all_images
        echo "Lösche alles in /var/www "
        rm -RI /var/www/*
    
        if [ ! -z "$USER_DIR" ] ; then
          echo "Lösche $USER_DIR/db, $USER_DIR/etc, $USER_DIR/kvwmap-server und $USER_DIR/www"
          rm -RI $USER_DIR/db $USER_DIR/etc $USER_DIR/kvwmap-server $USER_DIR/www
        fi
        echo "So jetzt ist alles weg."
        echo "Zum neu installieren folgende Befehle eingeben:"
        echo "git clone https://github.com/pkorduan/kvwmap-server.git"
        echo "kvwmap-server/kvwmap install"
        echo "kvwmap start"
        echo "und im Browser:"
        echo "http://meineserverip/kvwmap/install.php"
      ;;
      * )
        echo "OK, nix passiert!"
      ;;
    esac
  ;;

  web)
    fail_unless_root
    case $2 in
      start)
        start_web_container
      ;;
      stop)
        docker stop web
        docker ps -a
      ;;
      remove)
        docker stop web
        docker rm web
        docker ps -a
      ;;
      status)
        show_container_status "web"
      ;;
      *)
        echo "Gib nach web einen der folgenden Parameter ein: start, stop, remove oder status."
      ;;
    esac
  ;;

  *)
    usage
    exit 1
  ;;
esac
