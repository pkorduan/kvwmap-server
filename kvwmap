#!/bin/bash

# Settings
#settings
OS_USER="gisadmin"
OS_USER_EXISTS=false
getent passwd $OS_USER >/dev/null 2>&1 && OS_USER_EXISTS=true
USER_DIR=/home/$OS_USER
KVWMAP_IMAGE_VERSION=latest
IP_EXTERN=`ifconfig eth0 | grep 'inet ' | awk '{ print $2 }' | cut -d: -f2`

usage() {
  echo ""
  echo "Das Script führt Anweisungen für die Verwaltung des kvwmap-Servers aus. Es muss als Nutzer root ausgeführt werden.";
  echo "Dazu gehören Befehle zum Starten und Stoppen der Container aber auch solche zum Anzeigen von Stati und Laden von Konfigurationen und sonstige häufiger für die Administration benötigten Komandos."
  echo "Kontakt: peter.korduan@gdi-service.de"
  echo ""
  echo "Aufruf:";
  echo "kvwmap [Option]";
  echo ""
  echo "Optionen:"
  echo "install"
  echo "start         Startet alle Container."
  echo "status"
  echo "restart"
  echo "rebuild"
  echo "stop          Stopped alle Container."
  echo "clear         Löscht alle beendeten Container und nicht getaggete images."
  echo "pgsql start   Startet nur den Container mit der PostgreSQL-Datenbank."
  echo "pgsql status  Zeigt den Status des PostgreSQL-Datenbank Containers an."
  echo "uninstall"
  echo ""
  echo "Beispiele:"
  echo "$0 start"
  echo "$0 stop"
  echo "$0 pgsql status"
  echo ""  
}

fail_unless_root() {
  if [ "$(id -u)" != '0' ]; then
    echo "This script must be run as root"
    exit 1
  fi
}

create_www_data_volume() {
  docker create --name wwwdata \
    -v /var/www:/var/www \
      pkorduan/kvwmap-server:${KVWMAP_IMAGE_VERSION} /bin/true
}

start_mysql_container() {
  read -s -p "Enter Password for MySql user root: " MYSQL_ROOT_PASSWORD
  docker run --name mysql-server \
    -v $USER_DIR/etc/mysql:/etc/mysql \
    -v $USER_DIR/db/mysql:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
    -d mysql:5.5
}

start_pgsql_container() {
  read -s -p "Enter Password for PostgreSql user root: " PGSQL_ROOT_PASSWORD
  docker run --name pgsql-server \
    --volumes-from wwwdata \
    -v $USER_DIR/db/postgresql/data:/var/lib/postgresql/data \
    -p 5432:5432 \
    -e POSTGRES_PASSWORD=$PGSQL_ROOT_PASSWORD \
    -d mdillon/postgis:9.4
}

#
# Start the web container
#
start_web_container() {
  docker run --name web \
      --link mysql-server:mysql \
      --link pgsql-server:pgsql \
      -p 80:80 \
      -p 443:443 \
      -e "OS_USER=${OS_USER}" \
      -e "IP_EXTERN=${IP_EXTERN}" \
      --volumes-from wwwdata \
      -v $USER_DIR/etc/apache2/sites-available:/etc/apache2/sites-available \
      -v $USER_DIR/etc/apache2/sites-enabled:/etc/apache2/sites-enabled \
      -v $USER_DIR/etc/php5/php.ini:/etc/php5/apache2/php.ini \
      -d pkorduan/kvwmap-server:${KVWMAP_IMAGE_VERSION}
  docker ps
}

start_all_container() {
  create_www_data_volume
  start_mysql_container
  start_pgsql_container
  start_web_container
}

stop_all_container() {
  docker stop $(docker ps -a -q)
  echo "Alle Container gestopped."
}

remove_all_container() {
  docker rm $(docker ps -a -q)
  echo "Alle Container gelöscht."
}

show_container_status() {
  CONTAINER=$1
  RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 
  if [ $? -eq 1 ]; then
    echo "UNKNOWN - Container $CONTAINER does not exist."
    exit 3
  fi
 
  if [ "$RUNNING" == "false" ]; then
    echo "CRITICAL - $CONTAINER is not running."
    exit 2
  fi
 
  GHOST=$(docker inspect --format="{{ .State.Ghost }}" $container)
 
  if [ "$GHOST" == "true" ]; then
    echo "WARNING - $CONTAINER has been ghosted."
    exit 1
  fi
 
  STARTED=$(docker inspect --format="{{ .State.StartedAt }}" $CONTAINER)
  NETWORK=$(docker inspect --format="{{ .NetworkSettings.IPAddress }}" $CONTAINER)
 
  echo "OK - $CONTAINER is running. IP: $NETWORK, StartedAt: $STARTED"
}

case "$1" in
  install)
    fail_unless_root
    
    # Update debian repo
    apt-get update && apt-get install -y \
      apt-utils \
      curl \
      wget

    case `docker --version` in
      *Docker*)
        echo 'Docker allready installed!' 
        ;;
      *)
        # install docker
        echo 'Install docker.'
        curl -sSL https://get.docker.com/ | sh
      ;;
    esac

    # create user for web gis anwendung if not exists
    $OS_USER_EXISTS || adduser $OS_USER

    # set bash settings for web gis user
    cp /etc/skel/.bashrc $USER_DIR/.bashrc
    echo "export PATH=\$PATH:${USER_DIR}/kvwmap-server" >> $USER_DIR/.bashrc
    sed -i \
      -e "s|#alias ll=|alias ll=|g" \
      -e "s|alias rm=|#alias rm=|g" \
        $USER_DIR/.bashrc
    cp $USER_DIR/.bashrc ~/.bashrc
    source ~/.bashrc
    
    # create directories
    mkdir -p $USER_DIR/db/mysql \
             $USER_DIR/db/postgresql/data \
             $USER_DIR/etc/apache2/sites-available \
             $USER_DIR/etc/apache2/sites-enabled \
             $USER_DIR/etc/mysql \
             $USER_DIR/etc/postgresql \
             $USER_DIR/etc/php5 \
             /var/www/apps \
             /var/www/html \
             /var/www/logs \
             /var/www/tmp \
             /var/www/cache \
             /var/www/wms \
             /var/www/data/mapfiles \
             /var/www/data/synchro \
             /var/www/data/upload \
             /var/www/data/druckrahmen \
             /var/www/data/bilder \
             /var/www/data/alb \
             /var/www/data/referencemaps \
             /var/www/data/nachweise \
             /var/www/data/recherchierte_antraege \
             /var/www/data/festpunkte/archiv
    
    ln -s /var/www $USER_DIR/www

    cp $USER_DIR/kvwmap-server/www/html/index.php /var/www/html/index.php
    cp -R $USER_DIR/kvwmap-server/etc/ $USER_DIR/
    cp -R $USER_DIR/kvwmap-server/www/data/mapfiles/ /var/www/data/
    cp -R $USER_DIR/kvwmap-server/www/data/referencemaps/ /var/www/data/
    cp -R $USER_DIR/kvwmap-server/www/apps/PDFClass /var/www/apps/

    if [ ! -d "/var/www/apps/kvwmap" ]; then
      # clone kvwmap repository into apps
      git clone https://github.com/srahn/kvwmap.git /var/www/apps/kvwmap
      cd /var/www/apps/kvwmap
      git checkout develop
    fi

    mkdir -p /var/www/apps/kvwmap/fonts/custom \
             /var/www/apps/kvwmap/graphics/custom \
             /var/www/apps/kvwmap/layouts/custom \
             /var/www/apps/kvwmap/layouts/snippets/custom \
             /var/www/apps/kvwmap/symbols/custom

    PHPMYADMIN_VERSION="4.4.10"

    cd /var/www/apps
    wget -O phpMyAdmin.tar.gz http://downloads.sourceforge.net/project/phpmyadmin/phpMyAdmin/${PHPMYADMIN_VERSION}/phpMyAdmin-${PHPMYADMIN_VERSION}-all-languages.tar.gz
    tar xvfz phpMyAdmin.tar.gz
    mv /var/www/apps/phpMyAdmin-${PHPMYADMIN_VERSION}-all-languages /var/www/apps/phpMyAdmin
    rm /var/www/apps/phpMyAdmin.tar.gz

    chown -R $OS_USER.$OS_USER $USER_DIR /var/www
    chmod g+w /var/www/apps/kvwmap \
              /var/www/apps/kvwmap/graphics/wappen \
              /var/www/data/bilder \
              /var/www/data/festpunkte \
              /var/www/data/nachweise \
              /var/www/data/recherchierte_antraege \
              /var/www/data/synchro \
              /var/www/data/upload \
              /var/www/logs \
              /var/www/tmp

    # download neccessary images for mysql and postgis
    docker pull mysql:5.5

    docker pull mdillon/postgis:9.4
    
    #docker pull pkorduan/kvwmap-server:latest

    # build the kvwmap-server images from the Dockerfilie in the git repository kvwmap-server
    cd $USER_DIR/kvwmap-server/docker
    docker build -t pkorduan/kvwmap-server:latest .
  ;;
  rebuild)
    fail_unless_root
    stop_all_container
    remove_all_container
    docker rmi -f $(docker images -q pkorduan/kvwmap-server:latest)
    cd $USER_DIR/kvwmap-server/docker
    docker build -t pkorduan/kvwmap-server:latest .
    start_all_container
  ;;

  start)
    fail_unless_root
    start_all_container
  ;;
  
  pgsql)
    fail_unless_root
    case $2 in
      start)
        start_pgsql_container
      ;;
      stop)
        docker stop pgsql-server
        docker ps -a
      ;;
      remove)
        docker stop pgsql-server
        docker rm pgsql-server
        docker ps -a
      ;;
      status)
        show_container_status "pgsql-server"
      ;;
      *)
        echo "Gib nach pgsql einen der folgenden Parameter ein: start stop remove status"
      ;;
    esac
  ;;

  stop)
    fail_unless_root
    stop_all_container
    remove_all_container
  ;;

  restart)
    fail_unless_root
    stop_all_container
    remove_all_container
    start_all_container
  ;;

  status)
    fail_unless_root
    docker ps -a
    docker images
  ;;
  
  clean)
    # Remove all unused exited container
    docker rm $(docker ps -q -f status=exited)
    # Remove all images without tags
    docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
  ;;
  
  console)
    fail_unless_root
    case $2 in
      mysql)
        echo "Öffne ein Terminal im Container in dem der MySQL-Server läuft."
        docker exec -it mysql-server /bin/bash
      ;;
      pgsql)
        echo "Öffne ein Terminal im Container in dem der PostgreSQL-Server läuft."
        docker exec -it pgsql-server /bin/bash
      ;;
      web)
        echo "Öffne ein Terminal im Container in dem der Web-Server läuft."
        docker exec -it web /bin/bash
      ;;
      *)
        echo "Zu welchem Container soll eine Console aufgemacht werden, mysql, pgsql oder web?"
      ;;
    esac
  ;;
  
  mysql-client)
    fail_unless_root
    MYSQL_TCP_ADD=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' mysql-server`
    MYSQL_ROOT_PASSWORD=`docker inspect --format '{{index .Config.Env 0}}' mysql-server | cut -d \= -f 2`
    docker exec -it mysql-server mysql -h ${MYSQL_TCP_ADD} -u root --password=${MYSQL_ROOT_PASSWORD} mysql
  ;;

  pgsql-client)
    fail_unless_root
    POSTGRESQL_TCP_ADD=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' pgsql-server`
    PGPASSWORD=`docker inspect --format '{{index .Config.Env 0}}' pgsql-server | cut -d \= -f 2`
    docker exec -it pgsql-server psql -h ${POSTGRESQL_TCP_ADD} -U postgres postgres
  ;;
  
  *)
    usage
    exit 1
  ;;
esac